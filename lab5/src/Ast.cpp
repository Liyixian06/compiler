#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"

extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;

Node::Node()
{
    seq = counter++;
}

void Node::backPatch(std::vector<Instruction*> &list, BasicBlock*bb)
{
    for(auto &inst:list)
    {
        if(inst->isCond())
            dynamic_cast<CondBrInstruction*>(inst)->setTrueBranch(bb);
        else if(inst->isUncond())
            dynamic_cast<UncondBrInstruction*>(inst)->setBranch(bb);
    }
}

std::vector<Instruction*> Node::merge(std::vector<Instruction*> &list1, std::vector<Instruction*> &list2)
{
    std::vector<Instruction*> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}

void BinaryExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if(op == OR)
    {
        // Todo
    }
    else if(op >= LESS && op <= GREATER)
    {
        // Todo
    }
    else if(op >= ADD && op <= SUB)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        default:
            opcode = -1;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
}

void UnaryExpr::genCode()
{

}

void Constant::genCode()
{
    // we don't need to generate code.
}

void Id::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
}

void FuncCallExp::genCode()
{
    
}

void CompoundStmt::genCode()
{
    // Todo
}

void SeqNode::genCode()
{
    // Todo
}

/*
void DeclStmt::genCode()
{
    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    if(se->isGlobal())
    {
        Operand *addr;
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
    }
    else if(se->isLocal())
    {
        Function *func = builder->getInsertBB()->getParent();
        BasicBlock *entry = func->getEntry();
        Instruction *alloca;
        Operand *addr;
        SymbolEntry *addr_se;
        Type *type;
        type = new PointerType(se->getType());
        addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
        addr = new Operand(addr_se);
        alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
        entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
        se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
}
*/

void VarDecl::genCode()
{

}

void VarDef::genCode()
{
    
}

void ConstDecl::genCode()
{
    
}

void ConstDef::genCode()
{
    
}

void FuncParam::genCode()
{

}

void FuncParams::genCode()
{
    
}

void FuncRParams::genCode()
{
    
}

void IfStmt::genCode()
{
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    // Todo
}

void WhileStmt::genCode()
{

}

void BreakStmt::genCode()
{
    
}

void ContinueStmt::genCode()
{
    
}

void ReturnStmt::genCode()
{
    // Todo
}

void AssignStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    expr->genCode();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(lval->getSymPtr())->getAddr();
    Operand *src = expr->getOperand();
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
}

void FunctionDef::genCode()
{
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry();
    // set the insert point to the entry basicblock of this function.
    builder->setInsertBB(entry);

    stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    */
   
}

void EmptyStmt::genCode()
{
    
}

void ExprStmt::genCode()
{
    
}

void Ast::typeCheck()
{
    if(root != nullptr)
        root->typeCheck();
}

void BinaryExpr::typeCheck()
{
    expr1->typeCheck();
    expr2->typeCheck();
    Type* type1 = expr1->getSymPtr()->getType();
    Type* type2 = expr2->getSymPtr()->getType();
    if(type1->isVoid() || type2->isVoid()){
        fprintf(stderr, "type %s in binaryexpr is void\n", type1->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(type1 != type2){
        if(!(
        (type1->toStr()=="i32" && type2->toStr()=="const") // int 和 const
        || (type1->toStr()=="const" && type2->toStr()=="i32")
        || (type1->toStr()=="i1" && type2->toStr()=="const") // bool 和 const
        || (type1->toStr()=="const" && type2->toStr()=="i1")
        || (type1->toStr()=="i1" && type2->toStr()=="i32") // bool 和 int
        || (type1->toStr()=="i32" && type2->toStr()=="i1")
        || (type1->toStr()=="i32()" && type2->toStr()=="i32") // 返回值为int的函数和 int
        || (type1->toStr()=="i32" && type2->toStr()=="i32()")
        || (type1->toStr()=="i32()" && type2->toStr()=="i1") // 返回值为int的函数和 bool
        || (type1->toStr()=="i1" && type2->toStr()=="i32()")
        )   
        ){
            fprintf(stderr, "type %s and %s mismatch in binaryexpr\n", 
                type1->toStr().c_str(), type2->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
    symbolEntry->setType(type1);
}

void UnaryExpr::typeCheck()
{
    expr->typeCheck();
    Type* type1 = expr->getSymPtr()->getType();
    symbolEntry->setType(type1);
}

void Constant::typeCheck() // 判断是否为const类型
{
    if(symbolEntry->getType()!=TypeSystem::constType){
        fprintf(stderr, "const type error\n");
        exit(EXIT_FAILURE);
    }
}

void Id::typeCheck() 
{
    // 检查未定义和同一作用域下的重定义
}

void FuncCallExp::typeCheck()
{
    // 检查是否未定义
    Type* type = st->getType();
    FunctionType* tmp = static_cast<FunctionType*>(type);
    symbolEntry->setType(tmp->getRetType());
}

void CompoundStmt::typeCheck()
{
    if(stmt) stmt->typeCheck();
}

void SeqNode::typeCheck()
{
    stmt1->typeCheck();
    if(stmt2) stmt2->typeCheck();
}

void VarDecl::typeCheck()
{
    prevdef->typeCheck();
    def->typeCheck();
}

void VarDef::typeCheck()
{
    Type* type1 = id->getSymPtr()->getType();
    if(type1->isInt()!=1){
        fprintf(stderr, "vardef id type %s error\n", type1->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(expr){
        expr->typeCheck();
        Type* type2 = expr->getSymPtr()->getType();
        if((type2->isConst()||type2->isInt())!=1){
            fprintf(stderr, "vardef expr type %s error\n", type2->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
}

void ConstDecl::typeCheck()
{
    prevdef->typeCheck();
    def->typeCheck();
}

void ConstDef::typeCheck()
{
    Type* type1 = id->getSymPtr()->getType();
    if(type1->isConst()!=1){
        fprintf(stderr, "constdef id type %s error\n", type1->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(expr){
        expr->typeCheck();
        Type* type2 = expr->getSymPtr()->getType();
        if((type2->isConst()||type2->isInt())!=1){
            fprintf(stderr, "constdef expr type %s error\n", type2->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
}

void FuncParam::typeCheck()
{
    Type* type1 = id->getSymPtr()->getType();
    if(type1->isInt()!=1){
        fprintf(stderr, "funcparam id type %s error\n", type1->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(expr){
        expr->typeCheck();
        Type* type2 = expr->getSymPtr()->getType();
        if((type2->isConst()||type2->isInt())!=1){
            fprintf(stderr, "funcparam expr type %s error\n", type2->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
}

void FuncParams::typeCheck()
{
    // 将实参个数和类型插入函数类型中
    prevparam->typeCheck();
    if(param) param->typeCheck();
}

/*
void FuncRParam::typeCheck()
{
    param->typeCheck();
    Type* type = param->getSymPtr()->getType();
    if((type->isConst()||type->isInt())!=1){
        fprintf(stderr, "funcrealparam expr type %s error\n", type->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    symbolEntry->setType(type);
}*/

void FuncRParams::typeCheck()
{
    // 检查实参个数和类型是否与形参一致
    prevparam->typeCheck();
    if(param) param->typeCheck();
}

void IfStmt::typeCheck() // 把 cond 的类型设为 bool
{
    cond->typeCheck();
    if(cond->getSymPtr()->getType()->isInt()==1 || cond->getSymPtr()->getType()->isConst()==1)
        cond->getSymPtr()->setType(TypeSystem::boolType);
    else {
        fprintf(stderr, "ifstmt cond type error\n");
        exit(EXIT_FAILURE);
    }
    thenStmt->typeCheck();
}

void IfElseStmt::typeCheck()
{
    cond->typeCheck();
    if(cond->getSymPtr()->getType()->isInt()==1 || cond->getSymPtr()->getType()->isConst()==1)
        cond->getSymPtr()->setType(TypeSystem::boolType);
    else {
        fprintf(stderr, "ifelsestmt cond type error\n");
        exit(EXIT_FAILURE);
    }
    thenStmt->typeCheck();
    elseStmt->typeCheck();
}

void WhileStmt::typeCheck()
{
    cond->typeCheck();
    if(cond->getSymPtr()->getType()->isInt()==1 || cond->getSymPtr()->getType()->isConst()==1)
        cond->getSymPtr()->setType(TypeSystem::boolType);
    else{
        fprintf(stderr, "whilestmt cond type error\n");
        exit(EXIT_FAILURE);
    }
    stmt->typeCheck();
}

void BreakStmt::typeCheck()
{
    // 检查是否仅出现在 while 中
}

void ContinueStmt::typeCheck()
{
    // 检查是否仅出现在 while 中
}

void ReturnStmt::typeCheck() 
{
    // 检查返回值是否和声明的类型一致
    if(retValue){
        retValue->typeCheck();
        Type* ret_type = retValue->getSymPtr()->getType();
        SymbolEntry* se = identifiers->search_func();
        std::string name = dynamic_cast<IdentifierSymbolEntry*>(se)->get_name();
        FunctionType* type = static_cast<FunctionType*>(se->getType());
        if(ret_type->isVoid()!=1 && (type->getRetType())->isVoid())
        {
            fprintf(stderr, "func %s ret type error\n", name.c_str());
        }
    }
    else{
        SymbolEntry* se = identifiers->search_func();
        std::string name = dynamic_cast<IdentifierSymbolEntry*>(se)->get_name();
        FunctionType* type = static_cast<FunctionType*>(se->getType());
        if((type->getRetType())->isVoid()!=1){
            fprintf(stderr, "func %s ret type error: missing return value\n", name.c_str());
        }
    }
}

void AssignStmt::typeCheck()
{
    lval->typeCheck();
    expr->typeCheck();
    Type* type1 = lval->getSymPtr()->getType();
    Type* type2 = expr->getSymPtr()->getType();
    if(type1->isVoid() || type2->isVoid()){
        fprintf(stderr, "type %s in assignstmt is void\n", type1->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(type1 != type2){
        if(!(
        (type1->toStr()=="i32" && type2->toStr()=="const") // int 和 const
        || (type1->toStr()=="const" && type2->toStr()=="i32")
        || (type1->toStr()=="i1" && type2->toStr()=="const") // bool 和 const
        || (type1->toStr()=="const" && type2->toStr()=="i1")
        || (type1->toStr()=="i1" && type2->toStr()=="i32") // bool 和 int
        || (type1->toStr()=="i32" && type2->toStr()=="i1")
        || (type1->toStr()=="i32()" && type2->toStr()=="i32") // 返回值为int的函数和 int
        || (type1->toStr()=="i32" && type2->toStr()=="i32()")
        || (type1->toStr()=="i32()" && type2->toStr()=="i1") // 返回值为int的函数和 bool
        || (type1->toStr()=="i1" && type2->toStr()=="i32()")
        )   
        ){
            fprintf(stderr, "type %s and %s mismatch in assignstmt\n", 
                type1->toStr().c_str(), type2->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
}

void FunctionDef::typeCheck()
{
    // 检查不符合重载要求的重定义
    if(se->getType()->isFunc()!=1){
        fprintf(stderr, "funcdef type error\n");
        exit(EXIT_FAILURE);
    }
    if(params) params->typeCheck();
    stmt->typeCheck();
    FunctionType* type = static_cast<FunctionType*>(se->getType());
    if((type->getRetType())->isInt()){
        
    }
}

void EmptyStmt::typeCheck(){}

void ExprStmt::typeCheck()
{
    expr->typeCheck();
}

void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4); 
}

void BinaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case MUL:
            op_str = "mul";
            break;
        case DIV:
            op_str = "div";
            break;
        case MOD:
            op_str = "mod";
            break;
        case AND:
            op_str = "and";
            break;
        case OR:
            op_str = "or";
            break;
        case EQUAL:
            op_str = "equal";
            break;
        case NOTEQUAL:
            op_str = "notequal";
            break;
        case LESS:
            op_str = "less";
            break;
        case GREATER:
            op_str = "greater";
            break;
        case LESSEQUAL:
            op_str = "lessequal";
            break;
        case GREATEREQUAL:
            op_str = "greaterequal";
            break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

/*单目运算*/
void UnaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case NOT:
            op_str = "not";
            break;
    }
    fprintf(yyout, "%*cUnaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr->output(level + 4);
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    /*进制判断*/
    switch (this->scale)
    {
        case 0:
            fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
            break;
        case 1:
            fprintf(yyout, "%*cHexLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
            break;
        case 2:
            fprintf(yyout, "%*cOctLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
            break;
    }
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}

/*函数调用表达式 函数名 作用域 类型*/
void FuncCallExp::output(int level)
{
    std::string name, type;
    int scope;
    name = st->toStr();
    type = st->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(st)->getScope();
    fprintf(yyout, "%*cFunctionCall function name: %s, scope: %d, return type: %s\n", level, ' ', 
            name.c_str(), scope, type.c_str());
    if(params) params->output(level + 4);
}

void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    if(stmt) stmt->output(level + 4);
}

void SeqNode::output(int level)
{
    fprintf(yyout, "%*cSequence\n", level, ' ');
    stmt1->output(level + 4);
    stmt2->output(level + 4);
}

/*变量声明和定义*/
void VarDecl::output(int level)
{
    fprintf(yyout, "%*cVarDecl\n", level, ' ');
    prevdef->output(level + 4);
    def->output(level + 4);
}

void VarDef::output(int level)
{
    fprintf(yyout, "%*cVarDef\n", level, ' ');
    id->output(level + 4);
    if(expr) expr->output(level + 4);
}

/*常量函数和定义*/
void ConstDecl::output(int level)
{
    fprintf(yyout, "%*cConstDecl\n", level, ' ');
    prevdef->output(level + 4);
    def->output(level + 4);
}

void ConstDef::output(int level)
{
    fprintf(yyout, "%*cConstDef\n", level, ' ');
    id->output(level + 4);
    expr->output(level + 4);
}

void FuncParam::output(int level)
{
    fprintf(yyout, "%*cFuncParam\n", level, ' ');
    id->output(level + 4);
    if(expr) expr->output(level + 4);
}

void FuncParams::output(int level)
{
    fprintf(yyout, "%*cFuncParams:\n", level, ' ');
    prevparam->output(level + 4);
    if(param) param->output(level + 4);
}

void FuncRParams::output(int level)
{
    fprintf(yyout, "%*cFuncRealParams:\n", level, ' ');
    prevparam->output(level + 4);
    if(param) param->output(level + 4);
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void WhileStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    cond->output(level + 4);
    stmt->output(level + 4);
}

void BreakStmt::output(int level)
{
    fprintf(yyout, "%*cBreakStmt\n", level, ' ');
}

void ContinueStmt::output(int level)
{
    fprintf(yyout, "%*cContinueStmt\n", level, ' ');
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    if(retValue) retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    if(params) params->output(level + 4);
    stmt->output(level + 4);
}

void EmptyStmt::output(int level)
{
    fprintf(yyout, "%*cEmptyStmt\n", level, ' ');
}

void ExprStmt::output(int level){
    fprintf(yyout, "%*cExprStmt\n", level, ' ');
    expr->output(level + 4);
}